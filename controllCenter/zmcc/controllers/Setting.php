<?phpdefined('BASEPATH') OR exit('No direct script access allowed');/** * 系统配置控制器 * @author qidazhong@hnzhimo.com * @copyright (c) 2017, 河南知默网络科技有限公司 */class Setting extends CI_Controller {    public function __construct() {        parent::__construct();        $this->load->model("SettingModel");        $this->load->model("RoleModel");    }    /**     * 根据分组显示所有的配置项     */    public function setting() {        $data['result'] = "";        if ($this->input->method() == "post") {            $updateResult = $this->saveSetting();            if ($updateResult !== false) {                $this->session->success = "配置项保存成功";                $this->session->mark_as_flash("success");            } else {                $this->session->error = "配置项保存成功";                $this->session->mark_as_flash("error");            }        }        $data['title'] = "系统配置";        $settingGroup = $this->SettingModel->getSettingGroups();        foreach ($settingGroup as $key => &$group) {            $resdata = $this->SettingModel->getSettingsOnShow($group['setting_group']);            $rowdata = $resdata['result'];            if (empty($rowdata)) {//没有可展示的配置项则不显示                unset($settingGroup[$key]);                continue;            }            foreach ($rowdata as &$row) {                if (in_array($row['setting_type'], array("select", "radio", "checkbox"))) {                    $stroption = explode("\n", $row['setting_content']);                    $row['options'] = array();                    foreach ($stroption as $option) {                        $op = explode(":", $option);                        if (!empty($op)) {                            $row['options'][$op[0]] = $op[1];                        }                    }                }            }            $group['items'] = $rowdata;        }        $data['settings'] = $settingGroup;        $this->load->view("setting", $data);    }    /**     * 保存配置信息     */    private function saveSetting() {        $data = array();        foreach ($this->input->post() as $key => $value) {            $data[] = array("setting_key" => $key, "setting_value" => $value);        }        return $this->SettingModel->setSetting($data);    }    /**     * 配置项排序     */    public function editSort(){        $setting_id=$this->input->post("setting_id");        $sort_order=$this->input->post("sort_order");        $this->SettingModel->editSetting(array("sort_order"=>intval($sort_order)), array("setting_id" => $setting_id));    }    /**     * 添加配置项     */    public function addSetting() {        $this->load->library('form_validation');        $data['result'] = "fail";        if ($this->input->method() == "post") {            $insertFiled = array("setting_name", "setting_key", "setting_value", "setting_group", "is_show", "setting_content", "setting_type", "sort_order","description");            $data = elements($insertFiled, $this->input->post(), "0");            //验证数据            $valiRules = array(                array(                    'field' => 'setting_name',                    'label' => '设置项名称',                    'rules' => 'required|min_length[2]|max_length[12]|callback_settingNameCheck',                    "errors" => "请正确填写设置项名称:名称必填并且不能重复"                ),                array(                    'field' => 'setting_key',                    'label' => '设置项关键字',                    'rules' => 'required|callback_settingKeyCheck',                    "errors" => "请正确填写设置项名称:名称必填并且不能重复"                ),                array(                    'field' => 'setting_content',                    'label' => '设置项可取值',                    'rules' => 'callback_settingContengCheck',                    "errors" => "请正确填写设置项名称:名称必填并且不能重复"                ),            );            $this->form_validation->set_rules($valiRules);            if ($this->form_validation->run() == True && $this->SettingModel->addSetting($data)) {                $this->session->success = "新增参数项配置成功";                $this->session->mark_as_flash("success");                redirect(site_url("Setting/settingList"));            }            else{                $this->session->error = $this->form_validation->error_string();                $this->session->mark_as_flash("error");            }        }        $data['title'] = $this->zmsetting->getTitle($this->getModuleInfo());        $this->load->view("setting_add", $data);    }    public function settingNameCheck($setting_name) {        $checkData = array("setting_name" => $setting_name);        if (strtolower($this->uri->segment(2)) == "editsetting") {            $checkData['setting_id!='] = $this->uri->segment(3);        }        if ($this->SettingModel->isExist($checkData)) {            $this->form_validation->set_message('settingNameCheck', '配置项名称不能重复');            return false;        }        return true;    }    public function settingKeyCheck($key) {        $checkData = array("setting_key" => $key);        if (strtolower($this->uri->segment(2)) == "editsetting") {            $checkData['setting_id!='] = $this->uri->segment(3);        }        if ($this->SettingModel->isExist($checkData)) {            $this->form_validation->set_message('settingKeyCheck', '配置项关键字不能重复');            return false;        }        return true;    }    public function settingContengCheck($content) {        if (in_array($this->input->post("setting_type"), array("radio", "checkbox", "select")) && $content == "") {            $this->form_validation->set_message('settingContengCheck', '请填写配置项选项');            return false;        }        return true;    }    /**     * 修改配置项     */    public function editSetting($setting_id) {        $this->load->library('form_validation');        $data['result'] = "fail";        if ($this->input->method() == "post") {            $insertFiled = array("setting_name", "setting_key", "setting_value", "setting_group", "is_show", "setting_content", "setting_type", "sort_order","description");            $updateData = elements($insertFiled, $this->input->post(), "0");            //验证数据            $valiRules = array(                array(                    'field' => 'setting_name',                    'label' => '设置项名称',                    'rules' => 'required|min_length[2]|max_length[12]|callback_settingNameCheck',                    "errors" => "请正确填写设置项名称:名称必填并且不能重复"                ),                array(                    'field' => 'setting_key',                    'label' => '设置项关键字',                    'rules' => 'required|callback_settingKeyCheck',                    "errors" => "请正确填写设置项名称:名称必填并且不能重复"                ),                array(                    'field' => 'setting_content',                    'label' => '设置项可取值',                    'rules' => 'callback_settingContengCheck',                    "errors" => "请正确填写设置项名称:名称必填并且不能重复"                ),            );            $this->form_validation->set_rules($valiRules);            if ($this->form_validation->run() == True &&                    $this->SettingModel->editSetting($updateData, array("setting_id" => $this->input->post("setting_id")))) {                $this->session->success = "修改参数项配置成功";                $this->session->mark_as_flash("success");                redirect(site_url("Setting/settingList"));            }        }        $data['title'] = $this->zmsetting->getTitle($this->getModuleInfo());        $setting_info = $this->SettingModel->getSettingById($setting_id);        $data['setting'] = $setting_info;        $this->load->view("setting_edit", $data);    }    /**     * 删除配置项     */    public function deleteSetting() {        $selected = $this->input->post('setting_id');        if (!empty($selected) && is_array($this->input->post('setting_id'))) {            $where = implode(',', $this->input->post('setting_id'));            if ($this->SettingModel->deleteSetting('setting_id in (' . $where . ')')) {                $this->session->success = "删除成功!";                $this->session->mark_as_flash("success");            } else {                $this->session->error = "删除失败!";                $this->session->mark_as_flash("error");            }        } else {            $this->session->error = "请求有误!";            $this->session->mark_as_flash("error");        }        redirect(site_url('Setting/settingList'));    }    /**     * 配置项列表     */    public function settingList() {        $data = array();        $data['title'] = $this->zmsetting->getTitle($this->getModuleInfo());        $keyword = $this->input->post("keyword");//        dump($keyword);exit;        $this->load->library("pagination");//        $page = $this->input->get("page") ? $this->input->get("page") : 1;        $page = $this->input->get('per_page');        $page = $page ? $page : 1;        $limit = $this->input->get_post("limit") ? $this->input->get_post("limit") : 20;        //不分组查询配置项列表        $settings = $this->SettingModel->getSettings($keyword,($page - 1) * $limit,$limit);        $data['settings'] = $settings['result'];        $total = $settings['count'];        $config['base_url'] = site_url('setting/settinglist'); //当前分页地址        $config['total_rows'] = $total;        $config['per_page'] = $limit;    //每页显示的条数        $config['cur_page'] = $page;        $this->pagination->initialize($config);        $data['linklist'] = $this->pagination->create_links();//        dump($data);exit;        $this->load->view("setting_list", $data);    }    static function getModuleInfo() {        return array(            "moduleName" => "系统参数配置",            "controller" => "Setting",            "author" => "qidazhong@hnzhimo.com",            "icon" => "",            "operation" => array(                "settingList" => "参数配置",                "addSetting" => "添加配置项",                "editSetting" => "修改配置项",                "deleteSetting" => "删除配置项"            )        );    }}